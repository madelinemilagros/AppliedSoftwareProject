package com.goalup.madelinemerced;

import com.codename1.components.FloatingActionButton;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.NetworkEvent;
import com.codename1.io.Util;
import com.codename1.l10n.SimpleDateFormat;
import com.codename1.ui.Button;
import com.codename1.ui.CheckBox;
import com.codename1.ui.Command;
import com.codename1.ui.Component;
import static com.codename1.ui.Component.LEFT;
import com.codename1.ui.Container;
import com.codename1.ui.FontImage;
import com.codename1.ui.Image;
import com.codename1.ui.SwipeableContainer;
import com.codename1.ui.TextArea;
import com.codename1.ui.TextField;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.ui.layouts.GridLayout;
import com.codename1.ui.layouts.LayeredLayout;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Date;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class GoalUp {

    private Form current;
    private Resources theme;
//    String pointsInt;
    int pointsTotal;
    int cPointsTotal;
    int pointsInt;
//    CheckBox completeCB;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        Util.register("Storage", Storage.class);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if (err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });
    }

    public void start() {
        if (current != null) {
            current.show();
            return;
        }

        //Main Form 
        Form hi = new Form();
        //Logo Image
        Image logo = theme.getImage("LogoHeader.png");
        Label l = new Label(logo);

        //Labels and formatting for dashboard trackers
        Container landingPageButtons = new Container(new GridLayout(2, 2));
        Label dailyPointsTotal = new Label("Daily Points Total");
        Label pointsTracker = new Label("40/100 points");

        landingPageButtons.add(dailyPointsTotal);
        landingPageButtons.add(pointsTracker);

        //Flow Container
        Container flowLabel = new Container(new FlowLayout(Component.CENTER));
        //Adds Dashboard Labels to Flow Container (holds image as well)                

        //Adds Logo
        flowLabel.addComponent(l);
        //Toolbar
        Toolbar tb = hi.getToolbar();

        //SideMenu
        Image icon = theme.getImage("icon.png");
        Container topBar = BorderLayout.east(new Label(icon));
        Image icon2 = theme.getImage("icon.png");
        topBar.add(BorderLayout.WEST, new Label(icon2));
        topBar.add(BorderLayout.SOUTH, new Label("Goal Up", "Cause You Got This!"));
        topBar.setUIID("SideCommand");
        tb.addComponentToSideMenu(topBar);

        //List of Goals Formatting
        Container center = new Container(new GridLayout(2, 1));
        Label goalsList = new Label();
        center.add(goalsList);
    Label allTotal = new Label();
        Label dailyTotal = new Label();
        //CheckBox completeCB = new CheckBox();
        FloatingActionButton fab = FloatingActionButton.createFAB(FontImage.MATERIAL_ADD);
        fab.addActionListener(e -> {
            Label tf = new Label("Add New Reward or Goal?");
            Command goal = new Command("Goal");
            Command reward = new Command("Reward");
            Command result = Dialog.show(" ", tf, goal, reward);
            if (goal == result) {
                Goal(hi, allTotal, dailyTotal);
            } else {

            }

        });
      //Dashboard Point Total Holders (cumulative and daily) 
    
        Container flow = new Container(new GridLayout(1,2));
        flow.add(allTotal);
        flow.add(dailyTotal);
        flowLabel.addComponent(landingPageButtons);

        //add to main form
        hi.add(flowLabel);
        hi.add(flow);
//                hi.add(landingPageButtons);
        hi.add(center);
        hi.add(fab);

        //Displays form
        hi.show();
    }

    public Form Goal(Form hi, Label allTotal, Label dailyTotal) {
        Form newForm = new Form();

        //Storage Management
        ArrayList<Storage> goals = Storage.getGoals();
        Storage g = new Storage();

        //TextFields
        TextField goalTF = new TextField("", "Goal", 16, TextField.ANY);
        TextArea pointsTF = new TextArea(2, 2);

//        goalTF.setWidth(LEFT);
        pointsTF.setHint("Points");
        Button enter = new Button("Enter");

        enter.addActionListener(e -> {
            //Action listener for enter button
            try {
                int pointsInt = Integer.parseInt(pointsTF.getText());
                setPoints(pointsInt);
                int dm = method(pointsInt);

                String dailyTString = Integer.toString(dm);
//                allTotal.setText(dailyTString);
                g.setGoal(goalTF.getText());
                g.setPoints(pointsTF.getText());

                Storage.setGoals(goals);
                goals.add(g);
                hi.add(addGoal(g, dailyTotal, allTotal));
                hi.show();
                newForm.add(addGoal(g, dailyTotal, allTotal));

            } catch (NumberFormatException nfe) {

            }

        });

        Container goalEnter = BoxLayout.encloseXNoGrow(goalTF, pointsTF);
        Container count = new Container();
        count.add(
                GridLayout.encloseIn(
                        (goalEnter)
                ));

        newForm.add(count);
        newForm.add(enter);

        newForm.show();
        return newForm;
    }

    public String date() {
        //Date formatter
        Date date = new Date();
        SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
        String strDate = formatter.format(date);
        return strDate;
    }

    public void setPoints(int points) {
        pointsInt = points;
    }

    public int getPoints() {
        return pointsInt;
    }

    public int method(int p) {
        pointsTotal = p + pointsTotal;
        met(pointsTotal);
        return pointsTotal;
    }

    public int met(int p) {
        cPointsTotal = p + cPointsTotal;
        return cPointsTotal;
    }

    public void stop() {
        current = getCurrentForm();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = getCurrentForm();
        }
    }

    public void destroy() {

    }

    private Container addGoal(Storage s, Label dailyTotal, Label allTotal) {
        Label goal = new Label(s.getGoal());
        Button points = new Button(s.getPoints());
        CheckBox completeCB = new CheckBox();
        Container row = BoxLayout.encloseXNoGrow(goal, points, completeCB);
        Container count = new Container();
        count.add(
                GridLayout.encloseIn(
                        (row)
                ));

        Container cnt = BoxLayout.encloseY(
                (count), (createLineSeparator())
        );

        completeCB.addChangeListener(e -> {
            if (completeCB.isSelected()) {
                int total = method(pointsTotal);
                dailyTotal.setText(Integer.toString(total));
                allTotal.setText(Integer.toString(total));
                System.out.print(date());

            } else if (!completeCB.isSelected()) {
//                pointsTotal = 0;
                String dT = allTotal.getText();
                int total = Integer.parseInt(dT);
//                method(total);
                allTotal.setText(Integer.toString(total));
            }
        });
        return cnt;
    }

    public Component createLineSeparator() {
        Label separator = new Label("", "WhiteSeparator");
        separator.setShowEvenIfBlank(true);
        return separator;
    }

}
